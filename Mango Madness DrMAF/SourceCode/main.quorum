/*******************************************************************************
 * File: main.quorum
 * Description: Main class for Mango Madness
 * Author: Dr. Mark A. Friedman <drmarkafriedman@richardroman.com>
 ******************************************************************************/

/*******************************************************************************
 * class Main implements the Mango Madness game
 *
 * Description: Mango Madnes is a game where you aim a cannon while onboard a
 *     pirate ship and shoot mangos at flying seagulls to knock them out of
 *     the sky to score points.
 *
 * Notes: Mango Madness was conceived by Tommy P. The original version is
 *     being developed by Tom, Sam and Mark. This version may morph and serve
 *     as an educational tool sometime down the line.
 ******************************************************************************/

use Libraries.Game.Game
use Libraries.Game.InputMonitor
use Libraries.Interface.Events.KeyboardEvent

class Main is Game

    //**************************************************************************
    // class Main members
    
    // The configuration object manages the game's configurable values which
    // have hardcoded default values and which may be changed through the
    // configuration file specified below
    
    public Configuration configuration
        
    private constant text CONFIGURATION_FILENAME = "configuration/mango-madness.ini"

    // gameState holds the current state of the game
    
    // GAME_STATE_HELP: help screen and dialog are presented
    // GAME_STATE_PAUSED: pause the game (other than help presentation)
    // GAME_STATE_PREVIEW: ship sailing nearer animation
    // GAME_STATE_PREVIEW_TO_PLAY: ship pulling up and anchoring animation
    // GAME_STATE_PLAY: game play
    // GAME_STATE_PLAY_TO_EPILOG: ship unanchoring and pulling away animation
    // GAME_STATE_EPILOG: ship sailing farther animation

    private constant integer GAME_STATE_HELP = 1
    private constant integer GAME_STATE_PAUSED = 2
    private constant integer GAME_STATE_PREVIEW = 3
    private constant integer GAME_STATE_PREVIEW_TO_PLAY = 4
    private constant integer GAME_STATE_PLAY = 5
    private constant integer GAME_STATE_PLAY_TO_EPILOG = 6
    private constant integer GAME_STATE_EPILOG = 7

    private integer gameState = 0

    // gameTimer and gameProgress track the time and progress of the game
    
    private Timer gameTimer
    private number gameTime = 0.0
    private number gameProgress = 0.0
    
    // stateTimer and stateProgress track the time and progress of a state
    
    private Timer stateTimer
    private number stateProgress = 0.0
    
    //**************************************************************************
    // action Main starts the game
         
    action Main
                 
        configuration:Load(CONFIGURATION_FILENAME)
                
        SetGameName(configuration:gameName)
        
        SetScreenSize(configuration:displayWidth, configuration:displayHeight)
        SetFullScreen(configuration:displayFullscreen)
                
        StartGame()
                
    end // action Main

    //**************************************************************************
    // action Create initializes the game objects
         
    action CreateGame
    
        gameTime = configuration:gameStatePreviewTime + configuration:gameStatePreviewToPlayTime +
            configuration:gameStatePlayTime +
            configuration:gameStatePlayToEpilogTime + configuration:gameStateEpilogTime
            
        gameTimer:Start(gameTime)
        
        stateTimer:Start(configuration:gameStatePreviewTime)
        gameState = GAME_STATE_PREVIEW
        
    end // action CreateGame

    //**************************************************************************
    // action Quit ends the game
         
    action Quit
    
        Exit()
        
    end // action Quit

    //**************************************************************************
    // action Update updates each game frame
         
    action Update(number seconds)

        InputMonitor monitor
        KeyboardEvent keys

        // Quit the game when the Q key is pressed

        if monitor:IsKeyPressed(keys:Q)
        
            Quit()
            
        end
        
        if gameState = GAME_STATE_HELP
        
        else

            if gameState not= GAME_STATE_PAUSED
            
                gameProgress = gameTimer:Progress(seconds)
            
                stateProgress = stateTimer:Progress(seconds)
                
            end
        
            if gameState = GAME_STATE_PREVIEW
                if stateProgress <= 1.0
                else
                    stateTimer:Start(configuration:gameStatePreviewToPlayTime)
                    gameState = GAME_STATE_PREVIEW_TO_PLAY
                end
            elseif gameState = GAME_STATE_PREVIEW_TO_PLAY
                if stateProgress <= 1.0
                else
                    stateTimer:Start(configuration:gameStatePlayTime)
                    gameState = GAME_STATE_PLAY
                end
            elseif gameState = GAME_STATE_PLAY
                if stateProgress <= 1.0
                else
                    stateTimer:Start(configuration:gameStatePlayToEpilogTime)
                    gameState = GAME_STATE_PLAY_TO_EPILOG
                end
            elseif gameState = GAME_STATE_PLAY_TO_EPILOG
                if stateProgress <= 1.0
                else
                    stateTimer:Start(configuration:gameStateEpilogTime)
                    gameState = GAME_STATE_EPILOG
                end
            elseif gameState = GAME_STATE_EPILOG
                if stateProgress <= 1.0
                else
                    Exit()
                end
            end
        
        end

    end // action Update

end // class Main

/* Local Variables:      */
/* indent-tabs-mode: nil */
/* End:                  */
